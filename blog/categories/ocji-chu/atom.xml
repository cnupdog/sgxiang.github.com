<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: oc基础 | Sgxiang]]></title>
  <link href="http://sgxiang.github.io/blog/categories/ocji-chu/atom.xml" rel="self"/>
  <link href="http://sgxiang.github.io/"/>
  <updated>2013-11-15T21:59:34+08:00</updated>
  <id>http://sgxiang.github.io/</id>
  <author>
    <name><![CDATA[Sgxiang]]></name>
    <email><![CDATA[sgxiang1992@icloud.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ARC基础]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/11/arcji-chu/"/>
    <updated>2013-11-11T20:22:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/11/arcji-chu</id>
    <content type="html"><![CDATA[<p>在手工内存管理中，需要retain一个对象让其可用。</p>

<p>在ARC中只需让一个指针指向那个对象。有变量指针指向那个对象，那么它就会一直存在内存中。</p>

<p>当指针指向另外一个对象或不存在的时候，那个关联的对象才会被释放掉。</p>

<p><code>objc
NSString *firstName = self.textField.text;
</code></p>

<p>firstName变量为文本框中内容字符串对象的所有者</p>

<p>text属性也是所有者</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2011/10/Pointers2-500x265.png" alt="" /></p>

<!--more-->


<p>当用户输入新的文字时</p>

<p>text&mdash;>新的</p>

<p>firstName&mdash;>旧的</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2011/10/Pointers3-500x235.png" alt="" /></p>

<p>当firstName &mdash;>新值或者超出作用范围的时候，字符串对象才会被释放</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2011/10/Pointers4-500x198.png" alt="" /></p>

<p>firstName和textFiled.text为strong的类型指针。默认所有变量都是strong指针。</p>

<p><code>objc
__weak NSString *weakName = self.textFiled.text;
</code></p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2011/10/Pointers5-500x241.png" alt="" /></p>

<p>weak指针类型不能成为所有者，当文本框的内容改变了，那么字符串对象就会被释放。</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2011/10/Pointers6-500x209.png" alt="" /></p>

<p>weak大多在两个父子关系对象上比较有用。</p>

<p>父对象有个strong指针指向子对象，为了防止关系循环，子对象仅仅有一个weak指针指向父对象。</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2011/10/Pointers7-500x212.png" alt="" /></p>

<p><strong>  ARC 在适当的位置处理了 retain 和 release，仍然存在一些情况，需要手动的把这些指针设置为 nil，不然应用将会耗尽可用内存。如果一直保持所有创建的对象都存活，那么 ARC 将不能释放他们。 因此，当创建一个新对象的时候，需要考虑谁拥有它，还有这个对象应该存活多久。 </strong></p>

<hr />

<ul>
<li><p><strong> strong </strong> “retain” 的一个代号。会成为它所指对象的所有者。</p></li>
<li><p><strong> weak </strong> 弱引用指针。它指向的对象被销毁时，它会被自动的设置成 nil。</p></li>
<li><p><strong> unsafe_unretained </strong> 等同“assign” 。</p></li>
<li><p><strong> copy </strong> 它创建一个对象的拷贝，并且创建一个强引用关系。</p></li>
<li><p><strong> assign </strong> 不允许在对象上用这个修饰符， 但仍然能在简单类型的值，比如 BOOL,int 和 float 中用到它。</p></li>
</ul>


<hr />

<p><code>objc
@property(nonatomic,strong,readonly)NSString *result;
</code></p>

<p><strong> 如果定义了一个属性，那么应该用 self.propName 的形式来访问它， 而不是通过后端的实例变量(除非是在 init 方法，或者自定义的 getter 和 setter 方法中)。 </strong></p>

<p>不用arc编译的加上-no-bojc-arc标签</p>

<hr />

<p>整理自：<a href="http://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1">raywenderlich</a></p>

<p>其他学习ARC文章:</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">苹果官方文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[oc归档]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/10/ocgui-dang/"/>
    <updated>2013-11-10T22:53:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/10/ocgui-dang</id>
    <content type="html"><![CDATA[<h3>writeToFile:atomically:</h3>

<p>``` objc
NSDictionary *glossary = [NSDictionary dictionaryWithObjectsAndKeys:@&ldquo;TestClass&rdquo;,@&ldquo;className&rdquo;,@&ldquo;TestText&rdquo;,@&ldquo;classText&rdquo;, nil];</p>

<p>if ([glossary writeToFile:@&ldquo;glossary&rdquo; atomically:YES]==NO) {</p>

<pre><code>NSLog(@"save to file failed");
</code></pre>

<p>}else{</p>

<pre><code>NSLog(@"succeed");
</code></pre>

<p>}</p>

<p>NSDictionary *gly =  [NSDictionary dictionaryWithContentsOfFile:@&ldquo;glossary&rdquo;];</p>

<p>for (NSString *key in gly) {</p>

<pre><code>NSLog(@"%@:%@",key,[glossary objectForKey:key]);
</code></pre>

<p>}
```</p>

<!--more-->


<h3>NSKeyedArchiver</h3>

<p>```objc
NSDictionary *glossary = [NSDictionary dictionaryWithObjectsAndKeys:@&ldquo;TestClass&rdquo;,@&ldquo;className&rdquo;,@&ldquo;TestText&rdquo;,@&ldquo;classText&rdquo;, nil];</p>

<p>[NSKeyedArchiver archiveRootObject:glossary toFile:@&ldquo;glossary.archive&rdquo;];</p>

<p>NSDictionary *read = [NSKeyedUnarchiver unarchiveObjectWithFile:@&ldquo;glossary.archive&rdquo;];</p>

<p>for (NSString *key in read) {</p>

<pre><code>NSLog(@"%@:%@",key,[glossary objectForKey:key]);
</code></pre>

<p>}
```</p>

<h3>归档自定义对象</h3>

<h5>对象要实现NSCoding协议和encodeWithCoder:及initWithCoder:方法</h5>

<p>```objc
&ndash;(void)encodeWithCoder:(NSCoder *)aCoder{</p>

<pre><code>[aCoder encodeObject:_name forKey:@"name"];
[aCoder encodeInt:_age forKey:@"age"];
</code></pre>

<p>}</p>

<p>&ndash;(id)initWithCoder:(NSCoder *)aDecoder{</p>

<pre><code>_name = [aDecoder decodeObjectForKey:@"name"];
_age = [aDecoder decodeIntForKey:@"age"];
return self;
</code></pre>

<p>}
```</p>

<h3>使用NSData</h3>

<p>```objc
NSMutableData <em>dataArea = [NSMutableData data];
NSKeyedArchiver </em>archiver = [[NSKeyedArchiver alloc]initForWritingWithMutableData:dataArea];</p>

<p>[archiver encodeObject:_name forKey:@&ldquo;name&rdquo;];
[archiver finishEncoding];</p>

<p>[dataArea writeToFile:@&ldquo;fileName&rdquo; atomically:YES];
```</p>

<p>读取的时候</p>

<p>```objc
NSMutableData <em>dataArea = [NSMutableData data];
NSKeyedUnarchiver </em>unarchiver = [[NSKeyedUnarchiver alloc]initForReadingWithData:dataArea];</p>

<p>test = [unarchiver decodeObjectForKey:@&ldquo;name&rdquo;];</p>

<p>[unarchiver finishDecoding];
```</p>
]]></content>
  </entry>
  
</feed>
