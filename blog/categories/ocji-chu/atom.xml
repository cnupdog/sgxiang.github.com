<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: oc基础 | Sgxiang]]></title>
  <link href="http://sgxiang.github.io/blog/categories/ocji-chu/atom.xml" rel="self"/>
  <link href="http://sgxiang.github.io/"/>
  <updated>2014-01-20T19:26:50+08:00</updated>
  <id>http://sgxiang.github.io/</id>
  <author>
    <name><![CDATA[Sgxiang]]></name>
    <email><![CDATA[sgxiang1992@icloud.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用关联引用在类目中实现属性]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/22/shi-yong-guan-lian-yin-yong-zai-lei-mu-zhong-shi-xian-shu-xing/"/>
    <updated>2013-11-22T21:04:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/22/shi-yong-guan-lian-yin-yong-zai-lei-mu-zhong-shi-xian-shu-xing</id>
    <content type="html"><![CDATA[<p>类目中不能添加实例变量，所以通过关联引用向对象添加键值数据。</p>

<p>用到的两个方法：</p>

<p><code>objc
id objc_getAssociatedObject(id object, const void *key)
void objc_setAssociatedObject(id object, const void *key, id value, objc_AssociationPolicy policy)
</code></p>

<p>让一个对象与另外一个对象关联，<code>object</code>可以保存对<code>value</code>的引用并获得这个对象。</p>

<p>policy:</p>

<p>```objc
enum{</p>

<pre><code>OBJC_ASSOCIATION_ASSIGN = 0,
OBJC_ASSOCIATION_RETAIN_NONATOMIC = 1,
OBJC_ASSOCIATION_COPY_NONATOMIC = 3,
OBJC_ASSOCIATION_RETAIN = 01401,
OBJC_ASSOCIATION_COPY = 01403
</code></pre>

<p>}
```</p>

<p><strong>eg</strong>:</p>

<p>```objc</p>

<h1>import &lt;objc/runtime.h></h1>

<p>@interface Person(EmailAddress)
@property(nonatomic,readwrite,copy)NSString *emailAddress;
@end</p>

<p>@implementation Person(EmailAddress)</p>

<p>static char emailAddressKey;</p>

<p>&ndash;(NSString *)emailAddress{</p>

<pre><code>return objc_getAssociatedObject(self,&amp;emailAddressKey);
</code></pre>

<p>}</p>

<p>&ndash;(void)setEmailAddress:(NSString *)emailAddress{</p>

<pre><code>objc_setAssociatedObject(self,&amp;emailAddressKey,emailAddress,OBJC_ASSOCIATION_COPY);
</code></pre>

<p>}
@end
```</p>

<p>那两个方法很方便的就实现了属性的getter和setter。</p>

<p>另外的一个例子：</p>

<p>```objc
//为alert关联一个对象
id someObj = &hellip;;
UIAlertView *alert = [[UIAlertView alloc]</p>

<pre><code>                    initWithTitle:@"title"
                    message:nil
                    delegate:self
                    cancelButtonTitle:@"ok"
                    otherButtonTitles:nil];
</code></pre>

<p>//创建关联
objc_setAssociatedObject(alert,&amp;someKey,someOjb,OBJC_ASSOCIATION_RETAIN_NONATOMIC);
[alert show];</p>

<p>//alert完成后的触发
&ndash;(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{</p>

<pre><code>//取得关联
UIButton *sender = objc_getAssociatedObject(alertView,&amp;someKey);
NSLog(@"%@",[[sender titleLabel]text]);
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从C声明谈到Objective-C块声明]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/20/cong-csheng-ming-tan-dao-objective-ckuai-sheng-ming/"/>
    <updated>2013-11-20T23:51:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/20/cong-csheng-ming-tan-dao-objective-ckuai-sheng-ming</id>
    <content type="html"><![CDATA[<p>在这篇文章中，我将从最基本的C声明符开始逐步过渡到复杂的Ojbective-C的blocks语法。我花了一些时间去理解block语法，但是你一旦了解了它是如果组织和构成的，在你需要声明一个block的时候就不用无时无刻去google了。</p>

<h2>Declarators声明符</h2>

<p>变量的声明在C(Objective-c)中用声明符。</p>

<p>一个声明符有2个规则：</p>

<ul>
<li>指定变量的类型</li>
<li>给变量一个名称让它在合适的范围里使用</li>
</ul>


<p>从最基本的声明符开始：</p>

<p><code>objc
int a;
</code></p>

<p><code>int</code>是基本类型，<code>a</code>是一个变量名称或者称为标识符。</p>

<p>你会从标识符开始然后从右阅读直到末尾，然后从变量左边开始。</p>

<p>在这里右边没有任何东西所以它直截了当：<code>a</code>是一个<code>int</code>。</p>

<p>一个声明只能有1个基本类型，它是最左边的字的说明符。</p>

<p>说明符可以使用修饰符创建派生类型来修改基本类型。有4个修饰符：<code>*</code>,<code>[]</code>,<code>()</code>,<code>^</code>。</p>

<!--more-->


<h2>指针修饰符 *</h2>

<p><code>objc
int *a;
</code></p>

<p>基本类型依然是<code>int</code>，它的名称依然是变量<code>a</code>。但是指针修饰符<code>*</code>告诉我们<code>a</code>是一个指向<code>int</code>的指针而不是一个<code>int</code>。</p>

<p><code>*</code>修饰符通常出现在左边去修饰变量。</p>

<h2>数组修饰符 []</h2>

<p><code>objc
int a[];
</code></p>

<p>在这里我们可以看到，数组修饰符<code>[]</code>告诉我们<code>a</code>现在是一个<code>int</code>数组而不是一个简单的<code>int</code>。我们还可以定义数组的个数例如<code>int a[10]</code>。</p>

<p>数组修饰符<code>[]</code>总是在右边修饰变量。</p>

<h2>函数修饰符 ()</h2>

<p><code>objc
int f();
</code></p>

<p>函数修饰符<code>()</code>告诉我们<code>f</code>是一个函数它返回一个<code>int</code>。这个修饰符还可以指定函数的参数，例如<code>int f(long)</code>，这个函数带有一个<code>long</code>类型的参数以及返回一个<code>int</code>。</p>

<p>函数修饰符<code>()</code>总是在右边修饰变量。</p>

<h2>指针和数组</h2>

<p>修饰符可以组合来创建复杂的变量类型。修饰符和算术运算符一样有优先级的区分。<code>[]</code>和<code>()</code>比<code>*</code>(<code>^</code>)拥有更高的优先级。2个高级的修饰符被正确的写入变量的时候，当我们阅读复制的声明的时候，<strong>你总是从标识符开始然后向右阅读直到末尾或者一个括号的结尾然后才回到左边</strong>。</p>

<p><code>objc
int *a[];
</code></p>

<p>我们可以通过加括号来提高可读性</p>

<p><code>objc
int *(a[]);
</code></p>

<p>这是一个指向<code>int</code>的指针的数组。</p>

<p>但是你可能会问，如果我想要有一个指向<code>int</code>数组的指针呢？因为<code>*</code>比<code>[]</code>的优先级低，所以你需要括号<code>[]</code>来提高它的优先级。</p>

<p><code>objc
int (*a)[]
</code></p>

<p><code>a</code>现在是一个指针变量，指向一个<code>int</code>数组。</p>

<h2>数组和函数</h2>

<p>你不可能有定义一个函数数组和返回一个数组或者函数。一个函数可以将数组作为参数。</p>

<p><code>objc
int f(int [10]);
</code></p>

<p>这个函数带有10个<code>int</code>类型的参数以及返回<code>int</code>。</p>

<h2>指针和函数</h2>

<p><code>objc
int *f();
int *(f());
</code></p>

<p>这两种情况下，<code>f</code>是一个函数，返回一个指向<code>int</code>的指针。</p>

<p>如果想要一个指向函数的指针呢？<strong>括号！</strong></p>

<p><code>objc
int (*f)();
</code></p>

<p><code>f</code>是一个指向函数的指针，返回<code>int</code>。</p>

<h2>块指针修饰符 ^</h2>

<p>苹果公司在其扩展的ANSI-C标准中提出第四个修饰符：<code>^</code>。这个修饰符称为块。块和指向函数的指针很类似。你声明块的方式类似与声明一个指针函数。</p>

<p>块指针修饰符只能应用到一个函数中（你不能这样写<code>int ^a</code>，这不是一个合法的定义）。</p>

<p>这就是为什么<code>int ^b()</code>是非法的，这会导致一个编译错误：当你用优先级的规则阅读这个声明的时候，<code>b</code>将是一个函数，返回一个块指针指向<code>int</code>。这就是为什么你声明块的时候你需要将<code>^</code>和标识符放在括号<code>()</code>中。</p>

<p><code>objc
int (^b)()
</code></p>

<p><code>b</code>是一个块指针指向一个函数，返回<code>int</code>。或者缩写为块返回<code>int</code>。</p>

<p>当然，你可以在需要的时候指定其参数：</p>

<p><code>objc
int (^b)(long)
</code></p>

<p>这个块带有一个参数返回<code>int</code>。</p>

<p>这就是块声明的来源。</p>

<p>现在你已经了解了，在使用块的时候这里还有一些其他的语法需要你记住：一个用于定义一个块字面量，另一个是快递一个块给objective-c函数。</p>

<h2>抽象的声明符</h2>

<p>一个声明符由两件事组成：一个抽象声明符在其中插入标识符。</p>

<p>C中使用抽象声明符的3个cases:</p>

<ul>
<li>在这描述中：<code>int *a; long *b = (long *)a;</code>,<code>(long *)</code>是一个抽象声明符，是一个指向<code>long</code>的指针。</li>
<li>sizeof()作为参数：<code>malloc(sizeof(long *));</code></li>
<li>声明参数类型给函数：<code>int f(long *);</code></li>
</ul>


<p>objective-c可以在更多地方使用抽象声明符：声明方法参数或函数返回值。</p>

<p><code>objc
-(long **)methodWithArgument:(int *)a;
</code></p>

<p><code>long **</code>和<code>int *</code>是抽象声明。</p>

<p>所以为了在objective-c中使用块作为参数或返回值，我们需要去找到这些块的抽象声明符。我们可以通过取得声明符和删除标识符来得到。</p>

<p><code>int (^b)()</code>变成<code>int (^)()</code>。<code>int (^b)(long)</code>变为<code>int (^)(long)</code>。</p>

<p>例子：</p>

<p><code>objc
-(void)methodWithArgument:(int(^)())block;
-(void)anotherMethodWithArgument:(void(^)(long arg1))block;
</code></p>

<p>虽然你不需要参数的名字出现在块抽象的声明符中，当时这是一个很好的做法。它会给你一个很好的暗示当解析参数的时候，xcode会自动的完成它们来让你的在使用这个函数的时候变得更加方便。</p>

<h2>块字面量</h2>

<p>当你这样写的时候：<code>int a=2;</code>，<code>a</code>是一个声明符，2是对于<code>int</code>的字面量。</p>

<p><code>^</code>也被用作为一元运算符将一个函数变为一个块。你不需要指定返回类型，它会在返回语句中去推断，你也可以去添加它，这都一样。</p>

<p>为了实现这个块，你需要去命名它的参数。</p>

<p>所以对于块<code>int (^block)(long,long);</code>来说，其字面量是：</p>

<p>```objc
block = ^(long a,long b){</p>

<pre><code>int c = a + b;
return c;
</code></pre>

<p>}
```</p>

<p><strong>译自：<a href="http://nilsou.com/blog/2013/08/21/objective-c-blocks-syntax/">http://nilsou.com/blog/2013/08/21/objective-c-blocks-syntax/</a></strong></p>

<hr />

<h2>怎样在objective-c中定义块？</h2>

<p>作为本地变量：</p>

<p><code>objc
returnType (^blockName)(parameterTypes) = ^returnType(parameters) {...};
</code></p>

<p>作为属性：</p>

<p><code>objc
@property (nonatomic, copy) returnType (^blockName)(parameterTypes);
</code></p>

<p>作为函数参数：</p>

<p><code>objc
- (void)someMethodThatTakesABlock:(returnType (^)(parameterTypes))blockName {...}
</code></p>

<p>作为参数去响应函数：</p>

<p><code>objc
[someObject someMethodThatTakesABlock: ^returnType (parameters) {...}];
</code></p>

<p>作为typedef：</p>

<p><code>objc
typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^(parameters) {...}
</code></p>

<p><strong> 来自:<a href="http://fuckingblocksyntax.com">http://fuckingblocksyntax.com</a> </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARC基础]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/11/arcji-chu/"/>
    <updated>2013-11-11T20:22:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/11/arcji-chu</id>
    <content type="html"><![CDATA[<p>在手工内存管理中，需要retain一个对象让其可用。</p>

<p>在ARC中只需让一个指针指向那个对象。有变量指针指向那个对象，那么它就会一直存在内存中。</p>

<p>当指针指向另外一个对象或不存在的时候，那个关联的对象才会被释放掉。</p>

<p><code>objc
NSString *firstName = self.textField.text;
</code></p>

<p>firstName变量为文本框中内容字符串对象的所有者</p>

<p>text属性也是所有者</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2011/10/Pointers2-500x265.png" alt="" /></p>

<!--more-->


<p>当用户输入新的文字时</p>

<p>text&mdash;>新的</p>

<p>firstName&mdash;>旧的</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2011/10/Pointers3-500x235.png" alt="" /></p>

<p>当firstName &mdash;>新值或者超出作用范围的时候，字符串对象才会被释放</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2011/10/Pointers4-500x198.png" alt="" /></p>

<p>firstName和textFiled.text为strong的类型指针。默认所有变量都是strong指针。</p>

<p><code>objc
__weak NSString *weakName = self.textFiled.text;
</code></p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2011/10/Pointers5-500x241.png" alt="" /></p>

<p>weak指针类型不能成为所有者，当文本框的内容改变了，那么字符串对象就会被释放。</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2011/10/Pointers6-500x209.png" alt="" /></p>

<p>weak大多在两个父子关系对象上比较有用。</p>

<p>父对象有个strong指针指向子对象，为了防止关系循环，子对象仅仅有一个weak指针指向父对象。</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2011/10/Pointers7-500x212.png" alt="" /></p>

<p><strong>  ARC 在适当的位置处理了 retain 和 release，仍然存在一些情况，需要手动的把这些指针设置为 nil，不然应用将会耗尽可用内存。如果一直保持所有创建的对象都存活，那么 ARC 将不能释放他们。 因此，当创建一个新对象的时候，需要考虑谁拥有它，还有这个对象应该存活多久。 </strong></p>

<hr />

<ul>
<li><p><strong> strong </strong> “retain” 的一个代号。会成为它所指对象的所有者。</p></li>
<li><p><strong> weak </strong> 弱引用指针。它指向的对象被销毁时，它会被自动的设置成 nil。</p></li>
<li><p><strong> unsafe_unretained </strong> 等同“assign” 。</p></li>
<li><p><strong> copy </strong> 它创建一个对象的拷贝，并且创建一个强引用关系。</p></li>
<li><p><strong> assign </strong> 不允许在对象上用这个修饰符， 但仍然能在简单类型的值，比如 BOOL,int 和 float 中用到它。</p></li>
</ul>


<hr />

<p><code>objc
@property(nonatomic,strong,readonly)NSString *result;
</code></p>

<p><strong> 如果定义了一个属性，那么应该用 self.propName 的形式来访问它， 而不是通过后端的实例变量(除非是在 init 方法，或者自定义的 getter 和 setter 方法中)。 </strong></p>

<p>不用arc编译的加上-no-bojc-arc标签</p>

<hr />

<p>整理自：<a href="http://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1">raywenderlich</a></p>

<p>其他学习ARC文章:</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">苹果官方文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[oc归档]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/10/ocgui-dang/"/>
    <updated>2013-11-10T22:53:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/10/ocgui-dang</id>
    <content type="html"><![CDATA[<h3>writeToFile:atomically:</h3>

<p>``` objc
NSDictionary *glossary = [NSDictionary dictionaryWithObjectsAndKeys:@&ldquo;TestClass&rdquo;,@&ldquo;className&rdquo;,@&ldquo;TestText&rdquo;,@&ldquo;classText&rdquo;, nil];</p>

<p>if ([glossary writeToFile:@&ldquo;glossary&rdquo; atomically:YES]==NO) {</p>

<pre><code>NSLog(@"save to file failed");
</code></pre>

<p>}else{</p>

<pre><code>NSLog(@"succeed");
</code></pre>

<p>}</p>

<p>NSDictionary *gly =  [NSDictionary dictionaryWithContentsOfFile:@&ldquo;glossary&rdquo;];</p>

<p>for (NSString *key in gly) {</p>

<pre><code>NSLog(@"%@:%@",key,[glossary objectForKey:key]);
</code></pre>

<p>}
```</p>

<!--more-->


<h3>NSKeyedArchiver</h3>

<p>```objc
NSDictionary *glossary = [NSDictionary dictionaryWithObjectsAndKeys:@&ldquo;TestClass&rdquo;,@&ldquo;className&rdquo;,@&ldquo;TestText&rdquo;,@&ldquo;classText&rdquo;, nil];</p>

<p>[NSKeyedArchiver archiveRootObject:glossary toFile:@&ldquo;glossary.archive&rdquo;];</p>

<p>NSDictionary *read = [NSKeyedUnarchiver unarchiveObjectWithFile:@&ldquo;glossary.archive&rdquo;];</p>

<p>for (NSString *key in read) {</p>

<pre><code>NSLog(@"%@:%@",key,[glossary objectForKey:key]);
</code></pre>

<p>}
```</p>

<h3>归档自定义对象</h3>

<h5>对象要实现NSCoding协议和encodeWithCoder:及initWithCoder:方法</h5>

<p>```objc
&ndash;(void)encodeWithCoder:(NSCoder *)aCoder{</p>

<pre><code>[aCoder encodeObject:_name forKey:@"name"];
[aCoder encodeInt:_age forKey:@"age"];
</code></pre>

<p>}</p>

<p>&ndash;(id)initWithCoder:(NSCoder *)aDecoder{</p>

<pre><code>_name = [aDecoder decodeObjectForKey:@"name"];
_age = [aDecoder decodeIntForKey:@"age"];
return self;
</code></pre>

<p>}
```</p>

<h3>使用NSData</h3>

<p>```objc
NSMutableData <em>dataArea = [NSMutableData data];
NSKeyedArchiver </em>archiver = [[NSKeyedArchiver alloc]initForWritingWithMutableData:dataArea];</p>

<p>[archiver encodeObject:_name forKey:@&ldquo;name&rdquo;];
[archiver finishEncoding];</p>

<p>[dataArea writeToFile:@&ldquo;fileName&rdquo; atomically:YES];
```</p>

<p>读取的时候</p>

<p>```objc
NSMutableData <em>dataArea = [NSMutableData data];
NSKeyedUnarchiver </em>unarchiver = [[NSKeyedUnarchiver alloc]initForReadingWithData:dataArea];</p>

<p>test = [unarchiver decodeObjectForKey:@&ldquo;name&rdquo;];</p>

<p>[unarchiver finishDecoding];
```</p>
]]></content>
  </entry>
  
</feed>
