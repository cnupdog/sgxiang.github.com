<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Sgxiang]]></title>
  <link href="http://sgxiang.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sgxiang.github.io/"/>
  <updated>2014-01-20T19:26:50+08:00</updated>
  <id>http://sgxiang.github.io/</id>
  <author>
    <name><![CDATA[Sgxiang]]></name>
    <email><![CDATA[sgxiang1992@icloud.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mantle使用]]></title>
    <link href="http://sgxiang.github.io/blog/2014/01/11/mantleshi-yong/"/>
    <updated>2014-01-11T22:15:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2014/01/11/mantleshi-yong</id>
    <content type="html"><![CDATA[<p>Mantle可以很方便的去书写一个模型层的代码。</p>

<p>使用它可以很方便的去反序列化JSON或者序列化为JSON(需要在<code>MTLModel</code>子类中实现<code>&lt;MTLJSONSerializing&gt;</code>协议)</p>

<p>使用一个解释器<code>MTLJSONAdapter</code>去转换模型对象。</p>

<p>```objc
NSError <em>error = nil;
MyObject </em>myObject = [MTLJSONAdapter modelOfClass:MyObject.class fromJSONDictionary:JSONDictionary error:&amp;error];  //把JSONDictionary转换为模型对象</p>

<p>NSDictionary *JSONDictionary = [MTLJSONAdapter JSONDictionaryFromModel:myObject];   //将模型对象转为JSON字典
```</p>

<h3><code>+JSONKeyPathsByPropertyKey</code></h3>

<p>这个方法返回一个字典，指定着你的模型对象和JSON中关键字的映射关系。</p>

<p>一个例子：</p>

<p>```objc
@interface XYUser : MTLModel</p>

<p>@property (readonly, nonatomic, copy) NSString <em>name;
@property (readonly, nonatomic, strong) NSDate </em>createdAt;</p>

<p>@property (readonly, nonatomic, assign, getter = isMeUser) BOOL meUser;</p>

<p>@end</p>

<p>@implementation XYUser</p>

<ul>
<li>(NSDictionary *)JSONKeyPathsByPropertyKey {
  return @{
      @&ldquo;createdAt&rdquo;: @&ldquo;created_at&rdquo;,   //这里代表createdAt属性映射JSON中的created_at关键字
      @&ldquo;meUser&rdquo;: NSNull.null        //meUser不会从JSON中反序列化
  };
}</li>
</ul>


<p>@end
```</p>

<p>当我们用字典反序列化的时候</p>

<p>```objc
NSDictionary *JSONDictionary = @{</p>

<pre><code>@"name": @"john",
@"created_at": @"2013/07/02 16:40:00 +0000",
@"plan": @"lite"
</code></pre>

<p>};</p>

<p>XYUser *user = [MTLJSONAdapter modelOfClass:XYUser.class fromJSONDictionary:JSONDictionary error:&amp;error];</p>

<p>//user中的name为john  createdAt为2013/07/02 16:40:00 +0000 meUser为0 plan将会被忽略
```</p>

<h3><code>+JSONTransformerForKey:</code></h3>

<p>实现这个方法去用一个不一样的类型转换器去转化属性</p>

<p>```objc
+ (NSValueTransformer <em>)JSONTransformerForKey:(NSString </em>)key {</p>

<pre><code>if ([key isEqualToString:@"createdAt"]) {
    return [NSValueTransformer valueTransformerForName:XYDateValueTransformerName];
}
return nil;
</code></pre>

<p>}
```</p>

<p>对于一些值的转换：</p>

<p>```objc
+ (NSValueTransformer *)createdAtJSONTransformer {</p>

<pre><code>return [MTLValueTransformer reversibleTransformerWithForwardBlock:^(NSString *str) {
    return [self.dateFormatter dateFromString:str];
} reverseBlock:^(NSDate *date) {
    return [self.dateFormatter stringFromDate:date];
}];
</code></pre>

<p>}
```</p>

<h3><code>+classForParsingJSONDictionary:</code></h3>

<p>如果定义了一个类簇，可以实现这个方法去转换。</p>

<p>```objc
@interface XYMessage : MTLModel</p>

<p>@end</p>

<p>@interface XYTextMessage: XYMessage</p>

<p>@property (readonly, nonatomic, copy) NSString *body;</p>

<p>@end</p>

<p>@interface XYPictureMessage : XYMessage</p>

<p>@property (readonly, nonatomic, strong) NSURL *imageURL;</p>

<p>@end</p>

<p>@implementation XYMessage</p>

<ul>
<li><p>(Class)classForParsingJSONDictionary:(NSDictionary *)JSONDictionary {
  if (JSONDictionary[@&ldquo;image_url&rdquo;] != nil) {
      return XYPictureMessage.class;
  }</p>

<p>  if (JSONDictionary[@&ldquo;body&rdquo;] != nil) {
      return XYTextMessage.class;
  }</p>

<p>  NSAssert(NO, @&ldquo;No matching class for the JSON dictionary &lsquo;%@&rsquo;.&rdquo;, JSONDictionary);
  return self;
}</p></li>
</ul>


<p>@end
```</p>

<p>使用</p>

<p>```objc
NSDictionary *textMessage = @{</p>

<pre><code>@"id": @1,
@"body": @"Hello World!"
</code></pre>

<p>};</p>

<p>NSDictionary *pictureMessage = @{</p>

<pre><code>@"id": @2,
@"image_url": @"http://example.com/lolcat.gif"
</code></pre>

<p>};</p>

<p>XYTextMessage *messageA = [MTLJSONAdapter modelOfClass:XYMessage.class fromJSONDictionary:textMessage error:NULL];</p>

<p>XYPictureMessage *messageB = [MTLJSONAdapter modelOfClass:XYMessage.class fromJSONDictionary:pictureMessage error:NULL];
```</p>

<h3>数据的持久化</h3>

<p><code>MTLModel</code>已经遵循了<code>&lt;NSCoding&gt;</code>协议，所以可以<code>NSKeyedArchiver</code>归档这个模型对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[整洁的表视图]]></title>
    <link href="http://sgxiang.github.io/blog/2014/01/06/zheng-ji-de-biao-shi-tu/"/>
    <updated>2014-01-06T23:55:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2014/01/06/zheng-ji-de-biao-shi-tu</id>
    <content type="html"><![CDATA[<h2>1.轻量化的表视图控制器</h2>

<ol>
<li>将Data Source和其他Protocols剥离开视图控制器</li>
<li>将业务的逻辑处理移到Model层</li>
<li>创建Store类，用来处理数据加载，缓存，数据库配置等。</li>
<li>将Web服务逻辑移到Model层</li>
<li>将View代码移到View Layer</li>
</ol>


<!--more-->


<h2>2.整洁的表视图</h2>

<h3>2.1子视图控制器</h3>

<p>可以将一个表视图添加到另一个视图控制器，这样表视图控制器只需管理表视图，而父视图可以管理其他额外的界面元素。</p>

<p>```objc
&ndash; (void)addPhotoDetailsTableView{</p>

<pre><code>DetailsViewController *details = [[DetailsViewController alloc] init];
details.photo = self.photo;
details.delegate = self;
[self addChildViewController:details];
CGRect frame = self.view.bounds;
frame.origin.y = 110;
details.view.frame = frame;
[self.view addSubview:details.view];
[details didMoveToParentViewController:self];
</code></pre>

<p>}
```</p>

<p>表视图可以设置代理让父视图去响应。</p>

<h3>2.2分离关注点</h3>

<h4>桥接模型对象和单元之间的差距</h4>

<p>我们经常将一个处理视图显示数据的任务放在表示图的数据来源里：</p>

<p>```objc
&ndash; (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{</p>

<pre><code>PhotoCell *cell = [tableView dequeueReusableCellWithIdentifier:@"PhotoCell"];
Photo *photo = [self itemAtIndexPath:indexPath];    cell.photoTitleLabel.text = photo.name;
NSString* date = [self.dateFormatter stringFromDate:photo.creationDate];
cell.photoDateLabel.text = date;
</code></pre>

<p>}
```</p>

<p>在上面的代码中，数据源和cell的设计逻辑绑定在一起。我们可以将这部分放在cell的类别里重构：</p>

<p>```objc
@implementation PhotoCell (ConfigureForPhoto)
&ndash; (void)configureForPhoto:(Photo *)photo{</p>

<pre><code>self.photoTitleLabel.text = photo.name;
NSString* date = [self.dateFormatter stringFromDate:photo.creationDate];
self.photoDateLabel.text = date;
</code></pre>

<p>}
@end
```</p>

<p>这样在调用的时候数据源的代码就会很清晰，同时将关注点分离开了。</p>

<h3>2.3使cell可重用</h3>

<h4>在cell中处理cell的状态</h4>

<p>比如设置cell高亮和选中状态等。可以把这段逻辑放在cell中。</p>

<h4>处理多种cell类型</h4>

<p>```objc
&ndash; (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{</p>

<pre><code>NSString *key = self.keys[(NSUInteger) indexPath.row];
id value = [self.photo valueForKey:key];
UITableViewCell *cell;
if ([key isEqual:PhotoRatingKey]) {
    cell = [self cellForRating:value indexPath:indexPath];
} else {
    cell = [self detailCellForKey:key value:value];
}
return cell;
</code></pre>

<p>}
&ndash; (RatingCell <em>)cellForRating:(NSNumber </em>)rating indexPath:(NSIndexPath *)indexPath{</p>

<pre><code>// ...
</code></pre>

<p>}
&ndash; (UITableViewCell <em>)detailCellForKey:(NSString </em>)key value:(id)value{</p>

<pre><code>// ...
</code></pre>

<p>}
```</p>

<h4>table view的编辑</h4>

<p>在编辑过程中，表数据源通过代理方法来获得通知。将处理数据的任务放在模型层上，控制器扮演视图和模型层之间的协调者。这样逻辑模型会很容易测试，不用理会和控制器层的交互任务。</p>
]]></content>
  </entry>
  
</feed>
