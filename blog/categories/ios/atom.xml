<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Sgxiang]]></title>
  <link href="http://sgxiang.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://sgxiang.github.io/"/>
  <updated>2014-01-07T20:31:10+08:00</updated>
  <id>http://sgxiang.github.io/</id>
  <author>
    <name><![CDATA[Sgxiang]]></name>
    <email><![CDATA[sgxiang1992@icloud.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[整洁的表视图]]></title>
    <link href="http://sgxiang.github.io/blog/2014/01/06/zheng-ji-de-biao-shi-tu/"/>
    <updated>2014-01-06T23:55:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2014/01/06/zheng-ji-de-biao-shi-tu</id>
    <content type="html"><![CDATA[<h2>1.轻量化的表视图控制器</h2>

<ol>
<li>将Data Source和其他Protocols剥离开视图控制器</li>
<li>将业务的逻辑处理移到Model层</li>
<li>创建Store类，用来处理数据加载，缓存，数据库配置等。</li>
<li>将Web服务逻辑移到Model层</li>
<li>将View代码移到View Layer</li>
</ol>


<!--more-->


<h2>2.整洁的表视图</h2>

<h3>2.1子视图控制器</h3>

<p>可以将一个表视图添加到另一个视图控制器，这样表视图控制器只需管理表视图，而父视图可以管理其他额外的界面元素。</p>

<p>```objc
&ndash; (void)addPhotoDetailsTableView{</p>

<pre><code>DetailsViewController *details = [[DetailsViewController alloc] init];
details.photo = self.photo;
details.delegate = self;
[self addChildViewController:details];
CGRect frame = self.view.bounds;
frame.origin.y = 110;
details.view.frame = frame;
[self.view addSubview:details.view];
[details didMoveToParentViewController:self];
</code></pre>

<p>}
```</p>

<p>表视图可以设置代理让父视图去响应。</p>

<h3>2.2分离关注点</h3>

<h4>桥接模型对象和单元之间的差距</h4>

<p>我们经常将一个处理视图显示数据的任务放在表示图的数据来源里：</p>

<p>```objc
&ndash; (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{</p>

<pre><code>PhotoCell *cell = [tableView dequeueReusableCellWithIdentifier:@"PhotoCell"];
Photo *photo = [self itemAtIndexPath:indexPath];    cell.photoTitleLabel.text = photo.name;
NSString* date = [self.dateFormatter stringFromDate:photo.creationDate];
cell.photoDateLabel.text = date;
</code></pre>

<p>}
```</p>

<p>在上面的代码中，数据源和cell的设计逻辑绑定在一起。我们可以将这部分放在cell的类别里重构：</p>

<p>```objc
@implementation PhotoCell (ConfigureForPhoto)
&ndash; (void)configureForPhoto:(Photo *)photo{</p>

<pre><code>self.photoTitleLabel.text = photo.name;
NSString* date = [self.dateFormatter stringFromDate:photo.creationDate];
self.photoDateLabel.text = date;
</code></pre>

<p>}
@end
```</p>

<p>这样在调用的时候数据源的代码就会很清晰，同时将关注点分离开了。</p>

<h3>2.3使cell可重用</h3>

<h4>在cell中处理cell的状态</h4>

<p>比如设置cell高亮和选中状态等。可以把这段逻辑放在cell中。</p>

<h4>处理多种cell类型</h4>

<p>```objc
&ndash; (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath{</p>

<pre><code>NSString *key = self.keys[(NSUInteger) indexPath.row];
id value = [self.photo valueForKey:key];
UITableViewCell *cell;
if ([key isEqual:PhotoRatingKey]) {
    cell = [self cellForRating:value indexPath:indexPath];
} else {
    cell = [self detailCellForKey:key value:value];
}
return cell;
</code></pre>

<p>}
&ndash; (RatingCell <em>)cellForRating:(NSNumber </em>)rating indexPath:(NSIndexPath *)indexPath{</p>

<pre><code>// ...
</code></pre>

<p>}
&ndash; (UITableViewCell <em>)detailCellForKey:(NSString </em>)key value:(id)value{</p>

<pre><code>// ...
</code></pre>

<p>}
```</p>

<h4>table view的编辑</h4>

<p>在编辑过程中，表数据源通过代理方法来获得通知。将处理数据的任务放在模型层上，控制器扮演视图和模型层之间的协调者。这样逻辑模型会很容易测试，不用理会和控制器层的交互任务。</p>
]]></content>
  </entry>
  
</feed>
