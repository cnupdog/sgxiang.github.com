<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sgxiang]]></title>
  <link href="http://sgxiang.github.io/atom.xml" rel="self"/>
  <link href="http://sgxiang.github.io/"/>
  <updated>2013-11-15T22:32:02+08:00</updated>
  <id>http://sgxiang.github.io/</id>
  <author>
    <name><![CDATA[Sgxiang]]></name>
    <email><![CDATA[sgxiang1992@icloud.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[近期计划]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/15/jin-qi-ji-hua/"/>
    <updated>2013-11-15T22:07:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/15/jin-qi-ji-hua</id>
    <content type="html"><![CDATA[<ul>
<li>个人新app的开发</li>
<li>毕业论文的资料收集</li>
<li>面试工作</li>
<li>设计的学习</li>
<li>女友的生日礼物</li>
<li>ios关于网络编程的知识整理</li>
<li>ios关于块的知识整理</li>
</ul>


<p>关于9个技术问题的整理：</p>

<p>(from:<a href="http://wufawei.com/2013/05/11-interview-questions/">11个iOS面试问题</a>)</p>

<ul>
<li>如何处理异步网络事件</li>
<li>用过多线程的Core Data吗，使用的哪种方法</li>
<li>用过Core Animation哪种动画</li>
<li>用过Core Graphics吗？</li>
<li>NSNotification和KVO的用法和区别，它们的使用场景</li>
<li>如何使用NSOperationQueue</li>
<li>讲讲自己使用CoreText的经验</li>
<li>后台线程如何使用NSURLConnection</li>
<li>使用block应该注意的地方</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ARC基础]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/11/arcji-chu/"/>
    <updated>2013-11-11T20:22:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/11/arcji-chu</id>
    <content type="html"><![CDATA[<p>在手工内存管理中，需要retain一个对象让其可用。</p>

<p>在ARC中只需让一个指针指向那个对象。有变量指针指向那个对象，那么它就会一直存在内存中。</p>

<p>当指针指向另外一个对象或不存在的时候，那个关联的对象才会被释放掉。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">firstName</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textField</span><span class="p">.</span><span class="n">text</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>firstName变量为文本框中内容字符串对象的所有者</p>

<p>text属性也是所有者</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2011/10/Pointers2-500x265.png" alt="" /></p>

<!--more-->


<p>当用户输入新的文字时</p>

<p>text&mdash;>新的</p>

<p>firstName&mdash;>旧的</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2011/10/Pointers3-500x235.png" alt="" /></p>

<p>当firstName &mdash;>新值或者超出作用范围的时候，字符串对象才会被释放</p>

<p><img src="http://cdn1.raywenderlich.com/wp-content/uploads/2011/10/Pointers4-500x198.png" alt="" /></p>

<p>firstName和textFiled.text为strong的类型指针。默认所有变量都是strong指针。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__weak</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">weakName</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">textFiled</span><span class="p">.</span><span class="n">text</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2011/10/Pointers5-500x241.png" alt="" /></p>

<p>weak指针类型不能成为所有者，当文本框的内容改变了，那么字符串对象就会被释放。</p>

<p><img src="http://cdn2.raywenderlich.com/wp-content/uploads/2011/10/Pointers6-500x209.png" alt="" /></p>

<p>weak大多在两个父子关系对象上比较有用。</p>

<p>父对象有个strong指针指向子对象，为了防止关系循环，子对象仅仅有一个weak指针指向父对象。</p>

<p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2011/10/Pointers7-500x212.png" alt="" /></p>

<p><strong>  ARC 在适当的位置处理了 retain 和 release，仍然存在一些情况，需要手动的把这些指针设置为 nil，不然应用将会耗尽可用内存。如果一直保持所有创建的对象都存活，那么 ARC 将不能释放他们。 因此，当创建一个新对象的时候，需要考虑谁拥有它，还有这个对象应该存活多久。 </strong></p>

<hr />

<ul>
<li><p><strong> strong </strong> “retain” 的一个代号。会成为它所指对象的所有者。</p></li>
<li><p><strong> weak </strong> 弱引用指针。它指向的对象被销毁时，它会被自动的设置成 nil。</p></li>
<li><p><strong> unsafe_unretained </strong> 等同“assign” 。</p></li>
<li><p><strong> copy </strong> 它创建一个对象的拷贝，并且创建一个强引用关系。</p></li>
<li><p><strong> assign </strong> 不允许在对象上用这个修饰符， 但仍然能在简单类型的值，比如 BOOL,int 和 float 中用到它。</p></li>
</ul>


<hr />

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">strong</span><span class="p">,</span><span class="n">readonly</span><span class="p">)</span><span class="n">NSString</span> <span class="o">*</span><span class="n">result</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong> 如果定义了一个属性，那么应该用 self.propName 的形式来访问它， 而不是通过后端的实例变量(除非是在 init 方法，或者自定义的 getter 和 setter 方法中)。 </strong></p>

<p>不用arc编译的加上-no-bojc-arc标签</p>

<hr />

<p>整理自：<a href="http://www.raywenderlich.com/5677/beginning-arc-in-ios-5-part-1">raywenderlich</a></p>

<p>其他学习ARC文章:</p>

<ul>
<li><a href="https://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">苹果官方文档</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[oc归档]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/10/ocgui-dang/"/>
    <updated>2013-11-10T22:53:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/10/ocgui-dang</id>
    <content type="html"><![CDATA[<h3>writeToFile:atomically:</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">glossary</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="s">@&quot;TestClass&quot;</span><span class="p">,</span><span class="s">@&quot;className&quot;</span><span class="p">,</span><span class="s">@&quot;TestText&quot;</span><span class="p">,</span><span class="s">@&quot;classText&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="n">glossary</span> <span class="nl">writeToFile:</span><span class="s">@&quot;glossary&quot;</span> <span class="nl">atomically:</span><span class="n">YES</span><span class="p">]</span><span class="o">==</span><span class="n">NO</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;save to file failed&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;succeed&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">gly</span> <span class="o">=</span>  <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithContentsOfFile:</span><span class="s">@&quot;glossary&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">key</span> <span class="k">in</span> <span class="n">gly</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@:%@&quot;</span><span class="p">,</span><span class="n">key</span><span class="p">,[</span><span class="n">glossary</span> <span class="nl">objectForKey:</span><span class="n">key</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<h3>NSKeyedArchiver</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">glossary</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span><span class="s">@&quot;TestClass&quot;</span><span class="p">,</span><span class="s">@&quot;className&quot;</span><span class="p">,</span><span class="s">@&quot;TestText&quot;</span><span class="p">,</span><span class="s">@&quot;classText&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">NSKeyedArchiver</span> <span class="nl">archiveRootObject:</span><span class="n">glossary</span> <span class="nl">toFile:</span><span class="s">@&quot;glossary.archive&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSDictionary</span> <span class="o">*</span><span class="n">read</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSKeyedUnarchiver</span> <span class="nl">unarchiveObjectWithFile:</span><span class="s">@&quot;glossary.archive&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">key</span> <span class="k">in</span> <span class="n">read</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@:%@&quot;</span><span class="p">,</span><span class="n">key</span><span class="p">,[</span><span class="n">glossary</span> <span class="nl">objectForKey:</span><span class="n">key</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>归档自定义对象</h3>

<h5>对象要实现NSCoding协议和encodeWithCoder:及initWithCoder:方法</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">encodeWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aCoder</span><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">aCoder</span> <span class="nl">encodeObject:</span><span class="n">_name</span> <span class="nl">forKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">aCoder</span> <span class="nl">encodeInt:</span><span class="n">_age</span> <span class="nl">forKey:</span><span class="s">@&quot;age&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>  
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span><span class="p">{</span>
</span><span class='line'>    <span class="n">_name</span> <span class="o">=</span> <span class="p">[</span><span class="n">aDecoder</span> <span class="nl">decodeObjectForKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_age</span> <span class="o">=</span> <span class="p">[</span><span class="n">aDecoder</span> <span class="nl">decodeIntForKey:</span><span class="s">@&quot;age&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使用NSData</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableData</span> <span class="o">*</span><span class="n">dataArea</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableData</span> <span class="n">data</span><span class="p">];</span>
</span><span class='line'><span class="n">NSKeyedArchiver</span> <span class="o">*</span><span class="n">archiver</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSKeyedArchiver</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initForWritingWithMutableData:</span><span class="n">dataArea</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'><span class="p">[</span><span class="n">archiver</span> <span class="nl">encodeObject:</span><span class="n">_name</span> <span class="nl">forKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">archiver</span> <span class="n">finishEncoding</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'><span class="p">[</span><span class="n">dataArea</span> <span class="nl">writeToFile:</span><span class="s">@&quot;fileName&quot;</span> <span class="nl">atomically:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>读取的时候</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableData</span> <span class="o">*</span><span class="n">dataArea</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableData</span> <span class="n">data</span><span class="p">];</span>
</span><span class='line'><span class="n">NSKeyedUnarchiver</span> <span class="o">*</span><span class="n">unarchiver</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSKeyedUnarchiver</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initForReadingWithData:</span><span class="n">dataArea</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'><span class="n">test</span> <span class="o">=</span> <span class="p">[</span><span class="n">unarchiver</span> <span class="nl">decodeObjectForKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>  
</span><span class='line'><span class="p">[</span><span class="n">unarchiver</span> <span class="n">finishDecoding</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git相关]]></title>
    <link href="http://sgxiang.github.io/blog/2013/11/08/githubxiang-guan/"/>
    <updated>2013-11-08T01:10:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/11/08/githubxiang-guan</id>
    <content type="html"><![CDATA[<p>整理来源：<strong><em> <a href="http://www.worldhello.net/gotgithub/index.html">http://www.worldhello.net/gotgithub/index.html</a> </em></strong></p>

<p><strong>一张git操作的思维导图：</strong></p>

<ul>
<li><a href="http://sgxiang.github.io/images/git.png">下载</a></li>
</ul>


<hr />

<pre><code>$ ssh -T git@github.com    //检测连接github shh服务命令
</code></pre>

<h4>【clone】</h4>

<pre><code>$ git clone git@github.com:gotgithub/helloworld.git
$ git add README.md
$ git commit -m "README for this project"
$ git push origin master
</code></pre>

<h4>【新建】</h4>

<pre><code>$ git init
$ git add README.md
$ git commit -m "readme for thisproject"
$ git remote add origin git@github.com:sgxiang/some.git
$ git push -u origin master
</code></pre>

<!--more-->


<h4>移除文件</h4>

<pre><code>$rm test.txt
$git rm.test.txt
</code></pre>

<p>如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f，以防误删除文件后丢失修改的内容。</p>

<p>仅删除仓库中的 <code>$ git rm --cached test.txt</code></p>

<h5>重命名文件</h5>

<pre><code>$ git mv oldName newName
//相当于
//$ mv oldName newName
//$ git rm oldName
//$ git add newName
</code></pre>

<h4>【信息】</h4>

<pre><code>$ git config user.name "sgxiang"
$ git config user.email "sgxiang1992@icloud.com”
</code></pre>

<h4>撤销操作</h4>

<pre><code>$ git reset HEAD test.txt
</code></pre>

<h4>远程仓库</h4>

<pre><code>$ git remote -v  //查看
$ git remote add name gitURL //添加
</code></pre>

<h4>【分支】</h4>

<pre><code>$ git checkout -b mybranch  //新建分支并切换
$ touch hello1
$ git add hello1
$ git commit -m "add hello1 for mybranch"
$ git push -u origin my branch
//$ git merge hotfix合并分支
</code></pre>

<p><img src="http://git.oschina.net/progit/figures/18333fig0309-tn.png" alt="" /></p>

<h4>【删除分支】</h4>

<pre><code>$ git checkout master
$ git branch -D mybranch    //删除本地的
$ git push origin :mybranch    //删除远程的
</code></pre>

<h4>【里程碑】</h4>

<p>轻量里程碑 <code>git tag &lt;tagname&gt; [&lt;commit&gt;]</code></p>

<p>带说明的里程碑 <code>git tag -a &lt;tagname&gt; [&lt;commit&gt;]</code></p>

<p>带签名的里程碑 <code>git tag -s &lt;tagname&gt; [&lt;commit&gt;]</code></p>

<p>例子：</p>

<pre><code>$ touch hello1
$ git add hello1
$git commit -m “add hello1"
$ git tag -m "tag on initial commit" mytag1 HEAD^
$ git tag -m “tag on new commit” mytag2
$ git tag mytag3
$ git push origin refs/tags/*
</code></pre>

<p>删除本地里程碑  <code>$ git tag -d mytag3</code></p>

<p>删除远程里程碑  <code>$ git push origin :mytag3</code></p>

<h4>【创建项目主页】</h4>

<p>在版本库中创建一个名为gh-pages的分支然后添加静态网页即可</p>

<p>通过sgxiang.github.io/&lt;项目名>访问</p>

<p><strong><em> 创建纯净的分支不继承master </em></strong></p>

<p>[1]</p>

<pre><code>$ git checkout -b gh-pages
$ rm .git/index
$ printf "hello world" &gt;index.html
$ git add index.html
$ git reset —hard $(echo “branch gh-pages init.” | git commit-tree $(git write-tree))  //用git底层创建根提交，重置gh-pages
$ git push -u origin gh-pages
</code></pre>

<p>[2]</p>

<pre><code>$ git symbolic-ref HEAD refs/heads/gh-pages
$ rm .git/index
$ printf "hello” &gt;index.html
$ git add index.html
$ git commit -m "branch gh-pages init"
$ git push -u origin gh-pages
</code></pre>

<p>[3]</p>

<pre><code>$ git init ../helloworld-web
$ cd ../helloworld-web
$ printf "hello" &gt;index.html
$ git add index.html
$ git commit -m "branch gh-pages init"
$ cd ../helloworld
$ git fetch ../helloworld-web
$ git checkout -b gh-pages FETCH_HEAD
$ git push -u origin gh-pages
</code></pre>

<p>[4]</p>

<p>在项目管理页面勾选github pages会自动创建，检出定制</p>

<pre><code>$ git fetch
$ git checkout gh-pages
</code></pre>

<h4>【合并收到的pull request】</h4>

<pre><code>$ git remote add newPull https://github.com/newPull/newP.git
$ git fetch newP From https://github.com/newPull/newP
$ git merge newP/master
$ git log -graph -2
$ git push
</code></pre>

<h4>【共享版本库】</h4>

<p>在一个用户提交之后，另一个用户应该获取新提交再本地提交合并</p>

<pre><code>$ git fetch 
$ git merge
</code></pre>

<p><strong><em> $ git pull = git fetch + git merge </em></strong></p>

<p>遇到冲突  <code>$ git mergetool</code> 工具解决</p>

<p>恢复  <code>$ git reset —hard</code></p>

<p><strong><em> 除了合并操作还有变基操作 </em></strong></p>

<pre><code>$ git fetch origin  //获取远程版本库的提交到本地的远程分支
$ git rebase origin/master //将本地master分支的提交变基到新的远程分支中
$ git push 
// git pull —rebase
// git config branch.master.rebase true
// git config —global branch.autosetuprebase true
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mac上从零开始搭建基于Github的Octopress博客]]></title>
    <link href="http://sgxiang.github.io/blog/2013/10/18/cong-ling-kai-shi-da-jian-ji-yu-githubde-octopressbo-ke/"/>
    <updated>2013-10-18T10:49:00+08:00</updated>
    <id>http://sgxiang.github.io/blog/2013/10/18/cong-ling-kai-shi-da-jian-ji-yu-githubde-octopressbo-ke</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org">Octopress</a>
<a href="http://github.com">Github</a></p>

<br>


<p>通过网络几篇文章整理的大致全面的教程。</p>

<h2>1.安装Octopress</h2>

<p>确保安装了<code>git</code>和<code>ruby1.9.3</code>,通过<code>brew</code>安装<code>rbenv</code>然后用<code>rbenv</code>安装<code>ruby</code>。</p>

<h3>安装brew</h3>

<p>先卸载MacPorts</p>

<pre><code>sudo prot -f uninstall installed
sudo rm -fr \
</code></pre>

<p>再安装brew</p>

<pre><code>curl -L http://github.com/mxcl/homebrew/tarball/master | tar xz –strip 1 -C /usr/local

export PATH=/usr/local/bin:$PATH
</code></pre>

<p>安装成功后通过<code>brew install</code>查看brew版本</p>

<!--more-->


<h3>安装ruby</h3>

<pre><code>brew install rbenv
brew install ruby-build
rbenv install 1.9.3-p0
rbenv rehash
</code></pre>

<h3>最后安装Octopress</h3>

<pre><code>git clone git://github.com/imathis/octopress.git octopress

cd octopress
gem install bundler
rbenv rehash
bundle install
rake install
</code></pre>

<h3>配置Octopress</h3>

<p>编辑 <code>config.yml</code>文件的<code>url</code>,<code>title</code>,<code>subtitle</code>,<code>author</code>。</p>

<p>最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。同理，修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉。</p>

<h3>安装支持新浪微博和Dribbble的Octopress的Greyshade主题</h3>

<p>我现在用的就是greyshade主题</p>

<pre><code> cd octopress

 git clone git@github.com:allenhsu/greyshade.git .themes/greyshade

 echo "\$greyshade: color;" &gt;&gt; sass/custom/_colors.scss //替换 color 为自定义的链接高亮颜色

 rake "install[greyshade]"
</code></pre>

<p>在_config.yml中加入</p>

<pre><code>weibo_user: xsxiang # 微博数字 ID 或域名 ID
dribbble_user: 
weibo_share: true # 是否开启微博分享按钮
</code></pre>

<p>关于greyshade主题的头像问题，有两种途径可以设置头像</p>

<ul>
<li>在_config.yml文件中设置一个email，然后到gravatar网站上添加该email并上传一张头像</li>
<li>将需要使用的图片放到/source/images下。然后把/source/_includes/header.html文件中的img替换成 《img alt=“Profile Picture” src=“/images/tx.png” style=“width:160px;”》</li>
</ul>


<h3>配置Disqus插件</h3>

<p>Disqus是octopress内置的comments功能，编辑<code>config.yml</code>文件可以打开该功能，找到以下内容修改</p>

<pre><code>#Disqus comments
disqus_short_name: 
disqus_show_comment_count: false
</code></pre>

<p>填入注册<a href="http://disqus.com">disqus</a>账号的名称，并将false修改为true。【disqus要和自己的username.github.com关联上】</p>

<h2>2.配置github相关</h2>

<h3>在本机创建ssh</h3>

<pre><code>cd ~/.ssh
ssh-keygen -t rsa -C 你注册github时的email
</code></pre>

<p>弹出<code>Enter file in which to save the key (/Users/twer/.ssh/id_rsa):</code>直接按空格</p>

<p>弹出<code>Enter passphrase (empty for no passphrase):</code>输入你github账号的密码。<code>Enter same passphrase again:</code>再次输入你的密码。</p>

<p>打开~/.ssh下的id_rsa.pub文件复制里面的全部内容。
登陆github，选择Account Settings&mdash;>SSH Public Keys 添加ssh，把剪切板的内容复制到key输入框内直接保存。</p>

<p>测试shh:</p>

<pre><code>ssh git@github.com
</code></pre>

<p>输出</p>

<pre><code>PTY allocation request failed on channel 0
Hi username! You've successfully authenticated, but GitHub does not provide shell access.
Connection to github.com closed.
</code></pre>

<p>代表成功</p>

<h3>建立一个仓库</h3>

<p>登陆github<a href="https://github.com/new">创建一个仓库</a> ，仓库名称为username.github.com比如我的是sgxiang.github.com</p>

<h2>3.部署博客到github</h2>

<p>利用octopress的一个配置rake任务来自动配置上面创建的仓库：可以让我们方便的部署GitHub page。在终端输入如下命令：</p>

<pre><code>rake setup_github_pages
</code></pre>

<p>弹出之后输入<code>git@github.com:your_username/your_username.github.com.git</code>不要用提示的io，我的是<code>git@github.com/sgxiang/sgxiang.github.com.git</code></p>

<p><strong>输入以下命令部署博客</strong></p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>如果无法push到仓库的master分支，尝试在项目目录的.git/config中添加</p>

<pre><code>[branch "master"]
 remote = origin
 merge = refs/heads/master
</code></pre>

<p>博客的source需要单独提交，执行如下命令就可以将source提交到仓库的source分支下</p>

<pre><code>git add .
git commit -m 'Initial source commit'
git push origin source
</code></pre>

<p>部署前可以在本地预览，输入<code>rake preview</code>之后在浏览器输入<code>http://localhost:4000/</code>来访问</p>

<h2>4.写博客</h2>

<p>通过命令</p>

<pre><code>rake new_post["myTitle"]
</code></pre>

<p>文章生成在目录下的<code>source/_posts</code>目录下。文章是markdown格式的。可以通过 <a href="http://mouapp.com">Mou</a> 软件来编辑保存。</p>

<p>关于markdown的格式可以参考这篇文章:<a href="http://wowubuntu.com/markdown/">http://wowubuntu.com/markdown/</a></p>

<p>写完后就可以部署更新文章到github上了</p>

<pre><code>rake generate
git add .
git commit -am "Some comment here." 
git push origin source
rake deploy
</code></pre>

<p><strong>参考文章</strong></p>

<ul>
<li><a href="http://m.blog.csdn.net/blog/duck_genuine/7736037">http://m.blog.csdn.net/blog/duck_genuine/7736037</a></li>
<li><a href="http://www.imallen.com/blog/2013/10/16/deploying-octopress-to-qiniu.html">http://www.imallen.com/blog/2013/10/16/deploying-octopress-to-qiniu.html</a></li>
<li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/</a></li>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a></li>
<li><a href="http://www.imallen.com/blog/2013/05/12/add-support-for-weibo-and-dribbble-to-greyshade.html">http://www.imallen.com/blog/2013/05/12/add-support-for-weibo-and-dribbble-to-greyshade.html</a></li>
<li><a href="http://xautjzd.github.io/blog/2013/07/18/add-navigator/">http://xautjzd.github.io/blog/2013/07/18/add-navigator/</a></li>
<li><a href="http://xautjzd.github.io/blog/2013/07/18/congfig-disqus-plugin/">http://xautjzd.github.io/blog/2013/07/18/congfig-disqus-plugin/</a></li>
<li><a href="http://gilguan.github.io/blog/2013/10/16/zai-macshang-shi-yong-octopressda-jian-githubbo-ke/">http://gilguan.github.io/blog/2013/10/16/zai-macshang-shi-yong-octopressda-jian-githubbo-ke/</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
